//Video-2
//Creating maven project

//create maven project 
//add depedencies 
<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.4.5.Final</version>
</dependency>

<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.20</version>
</dependency>

//Video-4
//create config file
//add hibernate configuration dtd in config file
//hibernate cfg file

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/myhiber</property>
        <property name="connection.username">root</property>
        <property name="connection.password">root</property>
        <property name="dialect">org.hibernate.dialect.MySQL8Dialect</property>
        <property name="hbm2ddl.auto">update</property>
        <property name="show_sql">true</property>
    </session-factory>
</hibernate-configuration>


//create sessionfactory and check cfg details are correct or not
//session factory is an interface ,it contains multiple sessions
    public static void main( String[] args )
    {
        System.out.println( "Hello World!" );
        //connection one type it contains sesssion
        SessionFactory factory=new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        System.out.println(factory);
        System.out.println(factory.isClosed());
    }

    //Video-5
    //add entity class
    //configure entity class in config file

  @Entity()
public class Student {
    
    @Id
    private int id;
    private String name;
    private String city;
    public Student(int id, String name, String city) {
        super();
        this.id = id;
        this.name = name;
        this.city = city;
    }
    public Student() {
        super();
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    @Override
    public String toString() {
        return "Student [id=" + id + ", name=" + name + ", city=" + city + "]";
    }
    public String getCity() {
        return city;
    }
    public void setCity(String city) {
        this.city = city;
    }

}


//ADD in config file
<mapping class="com.tut.Student"/>

//add tostring method in entity

//create session factory after that create the entity object set some value
//get session object from session factory
//gettransaction from session and save entity object before closing the transaction


SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        // creating student
        Student st = new Student();
        st.setId(102);
        st.setName("PARVEZ");
        st.setCity("NEW YORK");
        System.out.println(st);
        Session session = factory.openSession();
        //
        Transaction tx = session.beginTransaction();
        session.save(st);
        tx.commit();
        session.close();
    }

//viddeo-7
//Entity Annotations

@Entity
@Table(name = "student_address")
public class Address {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "address_Id")
    private int addressId;

    @Column(length = 50, name = "STREET")
    private String street;

    @Column(length = 100, name = "CITY")
    private String city;

    @Column(name = "is_open")
    private boolean isOpen;

    @Transient
    private double x;

    @Column(name = "added_date")
    @Temporal(TemporalType.DATE)
    private Date addedDate;
    
    @Lob
    private byte[] image;

    public Address() {
        super();
        // TODO Auto-generated constructor stub
    }

    public int getAddressId() {
        return addressId;
    }

    public void setAddressId(int addressId) {
        this.addressId = addressId;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public boolean isOpen() {
        return isOpen;
    }

    public void setOpen(boolean isOpen) {
        this.isOpen = isOpen;
    }

    public double getX() {
        return x;
    }

    public void setX(double x) {
        this.x = x;
    }

    public Date getAddedDate() {
        return addedDate;
    }

    public void setAddedDate(Date addedDate) {
        this.addedDate = addedDate;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public Address(int addressId, String street, String city, boolean isOpen, double x, Date addedDate, byte[] image) {
        super();
        this.addressId = addressId;
        this.street = street;
        this.city = city;
        this.isOpen = isOpen;
        this.x = x;
        this.addedDate = addedDate;
        this.image = image;
    }

}


//add tag in config file
<property name="hbm2ddl.auto">create</property>
<mapping class="com.tut.Address"/>

//saving the object
SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        // creating student
        Student st = new Student();
        st.setId(102);
        st.setName("PARVEZ");
        st.setCity("NEW YORK");
        System.out.println(st);

        // creating the object of address class
        Address ad = new Address();
        ad.setStreet("street1");
        ad.setCity("DELHI");
        ad.setOpen(true);
        ad.setAddedDate(new Date());
        ad.setX(1234.234);

        // reading image
        FileInputStream fis = new FileInputStream("src/main/java/images.jpeg");
        byte[] data = new byte[fis.available()];
        fis.read(data);
        ad.setImage(data);

        Session session = factory.openSession();
        Transaction tx = session.beginTransaction();
        session.save(st);
        session.save(ad);
        tx.commit();
        session.close();
        System.out.println("Done....");
    }

//video-8
//Get vs Load
get is eager loading will get is lazy loading.if object not present in the data base if we trying to fecth using get it will return null value and in case of load it will throw exception.

SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();
        // Student student = session.get(Student.class, 101);
        Student student = session.load(Student.class, 102);
        System.out.println(student);

        Address ad = session.get(Address.class, 2);
        System.out.println(ad);
        System.out.println(ad.getStreet() + "    " + ad.getCity());

        session.close();
        factory.close();
    }


    //video-9
    //embeddable object
    @Entity()
public class Student {

    @Id
    private int id;
    private String name;
    private String city;

    private Certificate certi;

    public Student(int id, String name, String city, Certificate certi) {
        super();
        this.id = id;
        this.name = name;
        this.city = city;
        this.certi = certi;
    }

    public Certificate getCerti() {
        return certi;
    }

    public void setCerti(Certificate certi) {
        this.certi = certi;
    }

    public Student() {
        super();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Student [id=" + id + ", name=" + name + ", city=" + city + ", certi=" + certi + "]";
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

}


//certificate class
package com.tut;

import javax.persistence.Embeddable;

@Embeddable
public class Certificate {
    private String course;
    private String duration;

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public Certificate(String course, String duration) {
        super();
        this.course = course;
        this.duration = duration;
    }

    public Certificate() {
        super();
    }

}


//empdemo calss
package com.tut;

import javax.persistence.Embeddable;

@Embeddable
public class Certificate {
    private String course;
    private String duration;

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public Certificate(String course, String duration) {
        super();
        this.course = course;
        this.duration = duration;
    }

    public Certificate() {
        super();
    }

}

//video-10
//one to one mapping unidirectional
//entities classes
@Entity
@Data
public class Question {

    @Id
    @Column(name = "question_id")
    private Long questionId;
    private String question;

    @OneToOne
    @JoinColumn(name = "a_id")
    private Answer answer;
}

@Entity
@Data
public class Answer {

    @Id
    @Column(name = "answer_id")
    private Long answerid;
    private String answer;
    }


    public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        Question question1 = new Question(); //
        question1.setQuestionId(1L);
        question1.setQuestion("What is java");

        Answer answer1 = new Answer();
        answer1.setAnswerid(3L);
        answer1.setAnswer("Java is a programming language");

        question1.setAnswer(answer1);

        Question question2 = new Question();
        question2.setQuestionId(2L);
        question2.setQuestion("What is Collection");

        Answer answer2 = new Answer(); //
        answer2.setAnswerid(4L);
        answer2.setAnswer("API to work with java");
        question2.setAnswer(answer2);

        Session session = factory.openSession();
        Transaction tx = session.beginTransaction();

        session.save(question1);
        session.save(answer1);
        session.save(question2);
        session.save(answer2);
        tx.commit();
        session.close();
        factory.close();
    }


//one to one bidirectional

@Entity
@Data
public class Question {

    @Id
    @Column(name = "question_id")
    private Long questionId;
    private String question;

    @OneToOne
    @JoinColumn(name = "a_id")
    private Answer answer;
}


@Entity
@Data
public class Answer {

    @Id
    @Column(name = "answer_id")
    private Long answerid;
    private String answer;

    @OneToOne(mappedBy = "answer")
    private Question q;
}

public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        Question question1 = new Question(); //
        question1.setQuestionId(1L);
        question1.setQuestion("What is java");

        Answer answer1 = new Answer();
        answer1.setAnswerid(3L);
        answer1.setAnswer("Java is a programming language");
        answer1.setQ(question1);

        question1.setAnswer(answer1);

        Question question2 = new Question();
        question2.setQuestionId(2L);
        question2.setQuestion("What is Collection");
        
        Answer answer2 = new Answer(); //
        answer2.setAnswerid(4L);
        answer2.setAnswer("API to work with java");
        question2.setAnswer(answer2);
        answer2.setQ(question2);
        Session session = factory.openSession();
        Transaction tx = session.beginTransaction();

        session.save(question1);
        session.save(answer1);
        session.save(question2);
        session.save(answer2);
        tx.commit();
        session.close();
        factory.close();
    }


video-11
//one to many unidirectional mapping

@Entity
@Data
public class Question {

    @Id
    @Column(name = "question_id")
    private Long questionId;
    private String question;

    @OneToMany()
    private List<Answer> answers;
}

@Entity
@Data
public class Answer {

    @Id
    @Column(name = "answer_id")
    private Long answerid;

    private String answer;

    @ManyToOne
    private Question q;
}

public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        Question question1 = new Question(); //
        question1.setQuestionId(1L);
        question1.setQuestion("What is java");

        Answer answer1 = new Answer();
        answer1.setAnswerid(3L);
        answer1.setAnswer("Java is a programming language");
        answer1.setQ(question1);

        Answer answer2 = new Answer(); //
        answer2.setAnswerid(4L);
        answer2.setAnswer("API to work with java");
        answer2.setQ(question1);

        Answer answer3 = new Answer();
        answer3.setAnswerid(5L);
        answer3.setAnswer("Has many framework to develope the application");
        answer3.setQ(question1);

        List<Answer> ans = new ArrayList();
        ans.add(answer1);
        ans.add(answer2);
        ans.add(answer3);

        question1.setAnswers(ans);

        Session session = factory.openSession();
        Transaction tx = session.beginTransaction();
        session.save(question1);
        session.save(answer1);
        session.save(answer2);
        session.save(answer3);
        tx.commit();
        session.close();
        factory.close();
    }



    //ONE TO MANY BIDIRECTIONAL
@Entity
@Data
public class Question {

    @Id
    @Column(name = "question_id")
    private Long questionId;
    private String question;

    @OneToMany(mappedBy="q")
    private List<Answer> answers;
    }

    @Entity
    @Data
public class Answer {

    @Id
    @Column(name = "answer_id")
    private Long answerid;

    private String answer;

    @ManyToOne
    @JoinColumn(name="a_id")
    private Question q;

    /*
         * Question questions =(Question) session.get(Question.class, 1L);
         * System.out.println(questions.getQuestion());
         * 
         * for (Answer a : questions.getAnswers()) {
         * System.out.println(a.getAnswer().toString()); System.out.println(a.getQ()); }
         */

        Answer answer = session.get(Answer.class, 3L);
        System.out.println(answer.getAnswer());
        session.close();
        factory.close();
    }


//many to many

    @Entity
public class Emp {

    @Id
    private int eid;
    private String name;

    @ManyToMany
    @JoinTable(name="emp_learn",
    joinColumns = {@JoinColumn(name="eid")},
    inverseJoinColumns =  {@JoinColumn(name="pid")}
    )
    private List<Project> projects;

}


@Entity
public class Project {


    @Id
    private int pid;
    
    @Column(name = "project_name")
    private String projectname;
    
    @ManyToMany()
    private List<Emp> emp;

    }


    public static void main(String[] args) {

        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();

        Emp emp = new Emp();
        emp.setEid(1);
        emp.setName("James");

        Emp emp1 = new Emp();
        emp1.setEid(2);
        emp1.setName("scott");

        Project p1 = new Project();
        p1.setPid(1212);
        p1.setProjectname("Library management System");

        Project p2 = new Project();
        p2.setPid(3232);
        p2.setProjectname("chatbot");

        List<Project> list1 = new ArrayList<>();
        list1.add(p1);
        list1.add(p2);

        List<Emp> list2 = new ArrayList<>();
        list2.add(emp);
        list2.add(emp1);

        emp.setProjects(list1);
        emp1.setProjects(list1);
        p2.setEmp(list2);

        Session session = factory.openSession();
        Transaction tx = session.beginTransaction();
        session.save(emp);
        session.save(emp1);
        session.save(p1);
        session.save(p2);
        tx.commit();
        session.close();
        factory.close();

    }

//Get vs Load
 get is eager loading and load is lazy loading
 when get is called entire object is initialized while load is called partially object is called.

//object state
transient state:When we create the entity object and set the value object will be in transient state.
persistent state:when we open the the session and save the value object will be in the persistent state.If we we open the session in between close the sesssion we can perform any operation it will be persistent state.
detached state: when we close/clear the session then object will be in the detached state.we can switch from detached state to persistent state by callling update method.
remove state: when we call delete method it will be din remove state.

//hql
//call createQuery(query)method using session and pass it to String query
you can set dynamic variable using setparameter methid
yo can fecth list of result by calling list method. 

String query = "from Student as s where s.city=:x and s.name=:n";
        Query q = s.createQuery(query);
        q.setParameter("x", "ABC");
        q.setParameter("n", "john");

        // single-unique // multipl 
        List<Student> list = q.list();
        list.forEach(student -> {
            System.out.println(student.getName() + "   " + student.getCerti().getCourse());
        });
 
 //while you are deleting,updating or saving a query should be always in between transaction and commit

 //deleting query
 Transaction tx = s.beginTransaction();
        // delete query
        Query q2 = s.createQuery("delete from Student where city=:c");
        q2.setParameter("c", "Sydney");
        int result = q2.executeUpdate();
        System.out.println("Data Deleted");
        System.out.println(result);
        tx.commit();

  // update query
        Query q2 = s.createQuery("update from Student set city=:c where name=:n");
        q2.setParameter("c", "Delhi");
        q2.setParameter("n", "john");
        int result = q2.executeUpdate();
        System.out.println(result + "  updated result ");
        tx.commit();

   // how to execute join query
   //instead of calling list or executeupdate method just call getresultList() method
        Query q3 = s.createQuery("select q.questionId,q.question,a.answer from Question q INNER JOIN q.answers a");
        List<Object[]> resultList = q3.getResultList();
        /*
         * for (Object[] arr : resultList) { System.out.println(Arrays.toString(arr)); }
         */
        resultList.forEach(p -> {
            System.out.println(Arrays.toString(p));
        });

   //pagination in hibernate
   SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();
        Query query = session.createQuery("from Student");

        // implementing pagination
        query.setFirstResult(0);
        query.setMaxResults(5);

        List<Student> list = query.list();
        list.forEach(p -> {
            System.out.println(p.getId() + "  " + p.getName() + "   " + p.getCity());
        });

        session.close();
        factory.close();

    //native sql query

    SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session s = factory.openSession();
        String q = "select * from student";
        NativeQuery nq = s.createSQLQuery(q);

        List<Object[]> list = nq.list();
        for (Object[] student : list) {
            // System.out.println(Arrays.toString(student));
            System.out.println(student[4] + "   " + student[3]);
        }

        s.close();
        factory.close();
    }

    //cascade:if we save parent entity then child entity will be saved,delet,update we no need to save child entity

    @OneToMany(mappedBy = "q", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Answer> answers;

    SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();

        Question q1 = new Question();
        q1.setQuestionId(569L);
        q1.setQuestion("what is Linux ...");

        Answer a1 = new Answer(23424L, "operating system");
        a1.setQ(q1);
        Answer a2 = new Answer(256L, "second answer");
        a2.setQ(q1);
        Answer a3 = new Answer(36L, "third answer");
        a3.setQ(q1);
        List<Answer> list = new ArrayList();
        list.add(a1);
        list.add(a2);
        list.add(a3);

        q1.setAnswers(list);
        

        Transaction tx = session.beginTransaction();
        session.save(q1);
        /*
         * session.save(a1); session.save(a2); session.save(a3);
         */
        tx.commit();

        session.close();
        factory.close();



        //Cache
        //first level cache-associated with session.by default enabled.
        //within the same session if you are trying to get same object from database it hit first database and store into cache second time it will get the object from the cache not from the database.

        SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();
        // be default enabled
        Student student = session.get(Student.class, 1417);
        System.out.println(student);
        System.out.println("working something..");
        Student student2 = session.get(Student.class, 1417);
        System.out.println(student2);
        System.out.println(session.contains(student2));
        session.close();
        factory.close();

        


        //second level cache-associated with session factory(application level).manually enable.

       //first add two dependency in pom.xml file

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <version>2.10.6</version>
        </dependency>
     
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>5.4.5.Final</version>
        </dependency> 


        //add tags in configuration file

        <property name="cache.use_second_level_cache">true</property>
        <property name="cache.region.factory_class">org.hibernate.cache.ehcache.internal.EhcacheRegionFactory</property>

        //add annotations on entity
        @Entity()
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.READ_ONLY)
public class Student 

//create two session inside one sessionfacotry try to get same object from both session it will fire query on;ly one time.
SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session1 = factory.openSession();
        // first
        Student student1 = session1.get(Student.class, 1417);
        System.out.println(student1);
        session1.close();

        Session session2 = factory.openSession();
        // second
        Student student2 = session2.get(Student.class, 1417);
        System.out.println(student2);
        session2.close();
        factory.close();

//criteria api

//criteria has predefined method which we can use to fecth the records from data base
SessionFactory factory = new Configuration().configure("hibernate.cfg.xml").buildSessionFactory();
        Session session = factory.openSession();

        // can add restriction
        Criteria c = session.createCriteria(Student.class);
        // use of equal to method
        // c.add(Restrictions.eq("certi.course", "android"));

        // use to fetch record greater than record
        // c.add(Restrictions.gt("id", 10));

        c.add(Restrictions.like("certi.course", "java%"));
        List<Student> list = c.list();
        list.forEach(s -> {
            System.out.println(s);
        });

        session.close();
        factory.close();
